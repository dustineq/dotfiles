#!/bin/env zsh

bindkey -e # emacs mode in zsh

setopt no_beep
setopt histignorealldups
setopt EXTENDED_HISTORY          # Write the history file in the ':start:elapsed;command' format.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire a duplicate event first when trimming history.
setopt HIST_FIND_NO_DUPS         # Do not display a previously found event.
setopt HIST_IGNORE_ALL_DUPS      # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_DUPS          # Do not record an event that was just recorded again.
setopt HIST_IGNORE_SPACE         # Do not record an event starting with a space.
setopt HIST_SAVE_NO_DUPS         # Do not write a duplicate event to the history file.
setopt INC_APPEND_HISTORY        # Do not share history files across sessions.

SAVEHIST=65535
HISTFILE=~/.zsh_history

# homebrew for linux envvars
if [ -d /home/linuxbrew/ ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

# Adds ~/.local/bin to PATH
if [ -d "$HOME/.local/bin" ] && [[ ! "$PATH" == *$HOME/.local/bin* ]]; then export PATH="$PATH:$HOME/.local/bin"; fi

# volta
if type volta >/dev/null 2>&1; then
    export VOLTA_HOME="$HOME/.volta"
    if [[ ! "$PATH" == *"$VOLTA_HOME"/bin* ]]; then export PATH="$VOLTA_HOME/bin:$PATH"; fi
fi

# default editor
if type vim >/dev/null 2>&1; then EDITOR=vim; fi
if type nvim >/dev/null 2>&1; then EDITOR=nvim; fi
export EDITOR

# ripgrep, Makes $HOME/.ripgreprc the default configuration.
if [ -f "$HOME/.ripgreprc" ]; then
    # RIPGREP_CONFIG_PATH is required for ripgrep to respect the config.
    export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
fi

# homebrew autocomplete
if type brew >/dev/null 2>&1; then
  # homebrew zsh environment
  if [ -d "$(brew --prefix)/share/zsh/site-functions" ]; then
    # FPATH must be declared before calling compinit for zsh.
    FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
  fi

  # node-version-manager
  if [ -d "$(brew --prefix nvm)" ]; then
    export NVM_DIR="$HOME/.nvm"

    nvmsh="$(brew --prefix)/opt/nvm/nvm.sh"
    [ -s "$nvmsh" ] && \. "$nvmsh"  # This loads nvm
    unset nvmsh

    # IMPORTANT: bash_completion also loads zsh as of 2022/06/30.
    bashCompletion="$(brew --prefix)/opt/nvm/etc/bash_completion"
    if [ -s "$bashCompletion" ]; then
        # shellcheck source=/dev/null
        source "$bashCompletion"
    fi
    unset bashCompletion
  fi
fi

if type zoxide >/dev/null 2>&1; then eval "$(zoxide init zsh)"; fi

fzfShellDir="/usr/share/doc/fzf/examples" # Default on Ubuntu 20.04

if type brew >/dev/null 2>&1; then

    fzfShellDir="$(brew --prefix)/opt/fzf/shell"

    if [[ ! "$PATH" == *"$(brew --prefix)"/opt/fzf/bin* ]]; then
        # Append fzf/bin to the PATH since homebrew does not.
        PATH="$PATH:$(brew --prefix)/opt/fzf/bin"
        export PATH
    fi
fi

if [ -d "$fzfShellDir" ]; then
    if [[ $- == *i* ]]; then
        # shellcheck source=/dev/null
        source "$fzfShellDir/completion.zsh" 2> /dev/null
    fi

    # shellcheck source=/dev/null
    source "$fzfShellDir/key-bindings.zsh"
fi
unset fzfShellDir

# .zshrc.local, to override any settings from this .zshrc file.
if [ -f "$HOME/.zshrc.local" ]; then
    # shellcheck source=/dev/null
    source "$HOME/.zshrc.local"
fi

if [[ -o interactive ]]; then
  # Use modern completion system
  fpath+=("$HOME/.config/dotfiles_shell/autoload")
  autoload -Uz compinit
  compinit

  if type oh-my-posh >/dev/null 2>&1; then
          promptVariation='.minimal'
          if [[ -n "${WT_SESSION}" ]]
          then
                  promptVariation=''
          fi
          if [[ -n "${TERM_PROGRAM}" ]]
          then
                  if [[ 'VSCode' == "${TERM_PROGRAM}" ]]
                  then
                          promptVariation=''
                  fi
          fi

          eval "$(oh-my-posh --init --shell zsh --config ~/.dotfiles-prompt$promptVariation.omp.json)"
  else
          autoload -Uz promptinit
          promptinit
          prompt adam1
  fi

  if type dotnet >/dev/null 2>&1; then
    # zsh parameter completion for the dotnet CLI
    _dotnet_zsh_complete()
    {
      local completions=("$(dotnet complete "$words")")

      reply=( "${(ps:\n:)completions}" )
    }

    compctl -K _dotnet_zsh_complete dotnet
  fi

fi

getSourceLocations () {
    find -L "$HOME/Source" -mindepth 1 -maxdepth 3 -type d | grep -v '\.git'
}

editSourceLocation () { $EDITOR "$(getSourceLocations | fzf)" || return; }
getSourceLocation () { getSourceLocations | fzf || return; }
setSourceLocation () { cd "$(getSourceLocations | fzf)" || return; }
pushSourceLocation () { pushd "$(getSourceLocations | fzf)" || return; }

# Set TTY to prevent error: Inappropriate ioctl for device
GPG_TTY=$(tty)
export GPG_TTY

autoload zkbd

autoload -z edit-command-line
zle -N edit-command-line
bindkey "^X^E" edit-command-line

alias esl=editSourceLocation
alias gsl=getSourceLocation
alias ssl=setSourceLocation
alias psl=pushSourceLocation

# >>> mamba initialize >>>
# !! Contents within this block are managed by 'mamba init' !!
export MAMBA_EXE="/Users/dustin/.local/bin/micromamba";
export MAMBA_ROOT_PREFIX="/Users/dustin/micromamba";
__mamba_setup="$("$MAMBA_EXE" shell hook --shell zsh --prefix "$MAMBA_ROOT_PREFIX" 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__mamba_setup"
else
    if [ -f "/Users/dustin/micromamba/etc/profile.d/micromamba.sh" ]; then
        . "/Users/dustin/micromamba/etc/profile.d/micromamba.sh"
    else
        export  PATH="/Users/dustin/micromamba/bin:$PATH"  # extra space after export prevents interference from conda init
    fi
fi
unset __mamba_setup
# <<< mamba initialize <<<

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/Users/dustin/mambaforge/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/Users/dustin/mambaforge/etc/profile.d/conda.sh" ]; then
        . "/Users/dustin/mambaforge/etc/profile.d/conda.sh"
    else
        export PATH="/Users/dustin/mambaforge/bin:$PATH"
    fi
fi
unset __conda_setup

if [ -f "/Users/dustin/mambaforge/etc/profile.d/mamba.sh" ]; then
    . "/Users/dustin/mambaforge/etc/profile.d/mamba.sh"
fi
# <<< conda initialize <<<

source <(kubectl completion zsh)

alias aws-profile='export AWS_PROFILE=$(sed -n "s/\[profile \(.*\)\]/\1/gp" ~/.aws/config | fzf)'
alias ap="aws-profile"
alias aws-ecr-repo='aws ecr describe-repositories --query "repositories[].repositoryName" --output text | fzf'
alias aws-ecr-login='aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 497689819904.dkr.ecr.us-east-1.amazonaws.com'

if [ -d "$HOME/.local/bin" ] && [[ ! "$PATH" == *$HOME/.local/bin* ]]; then export PATH="$PATH:$HOME/.local/bin"; fi

if [ -d "$HOME/.config/dotfiles_shell/bin" ] && [[ ! "$PATH" == *$HOME/.config/dotfiles_shell/bin ]]; then
    export PATH="$PATH:$HOME/.config/dotfiles_shell/bin"
    . $HOME/.config/dotfiles_shell/autoload/eq.sh
    . $HOME/.config/dotfiles_shell/autoload/aws.sh
fi
